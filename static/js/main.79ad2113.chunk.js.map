{"version":3,"sources":["dal/main.tsx","redux/reducers/employeeReducer.ts","components/InstrumentPanel.tsx","components/EmployeeForm/EmployeeFormPresentation.tsx","components/EmployeeForm/UpdateEmployee.tsx","components/EmployeeRow.tsx","components/EmployeesList.tsx","components/EmployeeForm/CreateNewEmployee.tsx","App.tsx","redux/store.ts","index.tsx"],"names":["IEmployeeAPI","createEmployee","newEmployee","employees","JSON","parse","localStorage","getItem","_id","Date","getTime","push","setItem","stringify","deleteEmployee","id","newEmployeesList","filter","employee","getEmployees","updateEmployee","updatedEmployee","map","CREATE_EMPLOYEE","SET_EMPLOYEES","DELETE_SELECTED_EMPLOYEE","SELECT_EMPLOYEE","UPDATE_EMPLOYEE","initialState","selectedEmployeeId","selectEmployeeAC","payload","type","data","dispatch","connect","state","isChanged","deleteSelectedEmployee","deleteSelectedEmployeeAC","Box","mt","mb","ButtonGroup","color","aria-label","Button","onClick","disabled","handleChange","handleSubmit","handleCheckbox","buttonText","Typography","variant","component","Grid","container","spacing","alignItems","onSubmit","item","xs","TextField","placeholder","required","fullWidth","name","onChange","value","trim","select","label","position","MenuItem","birthday","InputLabelProps","shrink","Checkbox","checked","isFired","FormControl","FormLabel","RadioGroup","gender","FormControlLabel","control","Radio","useState","setData","setChanged","console","log","e","target","preventDefault","alert","selectEmployee","open","setOpen","TableRow","className","undefined","style","cursor","TableCell","align","display","justifyContent","size","Dialog","onClose","DialogContent","TableContainer","Paper","Table","TableHead","TableBody","i","initialData","useEffect","reducers","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.79ad2113.chunk.js","sourcesContent":["import {IEmployee} from \"../interfaces/entities\"\r\n\r\n\r\nexport const IEmployeeAPI = {\r\n    createEmployee: (newEmployee: IEmployee): IEmployee => {\r\n\r\n        const employees: IEmployee[] = JSON.parse(localStorage.getItem(\"employees\") || '[]')\r\n        newEmployee._id = new Date().getTime();\r\n        employees.push(newEmployee);\r\n        localStorage.setItem(\"employees\", JSON.stringify(employees))\r\n\r\n        return newEmployee;\r\n    },\r\n    deleteEmployee: (id: number) => {\r\n        const employees: IEmployee[] = JSON.parse(localStorage.getItem(\"employees\") || '[]')\r\n        const newEmployeesList = employees.filter((employee: IEmployee) => employee._id !== id)\r\n        localStorage.setItem(\"employees\", JSON.stringify(newEmployeesList))\r\n    },\r\n    getEmployees: () => {\r\n        return JSON.parse(localStorage.getItem(\"employees\") || '[]')\r\n    },\r\n    updateEmployee: (updatedEmployee: IEmployee) => {\r\n        const employees: IEmployee[] = JSON.parse(localStorage.getItem(\"employees\") || '[]')\r\n        const newEmployeesList = employees.map((employee: IEmployee) => {\r\n            if (employee._id === updatedEmployee._id) return updatedEmployee\r\n            return employee;\r\n        })\r\n        localStorage.setItem(\"employees\", JSON.stringify(newEmployeesList))\r\n    }\r\n}\r\n\r\nexport default IEmployeeAPI;","import { IEmployeeAPI } from \"../../dal/main\";\r\nimport {IEmployee, IStateEmployee} from \"../../interfaces/entities\";\r\nimport {IAction, IEmployeeState} from \"../../interfaces/states\";\r\n\r\nconst CREATE_EMPLOYEE = \"employee/CREATE_EMPLOYEE\";\r\nconst SET_EMPLOYEES = \"employee/SET_EMPLOYEES\";\r\nconst DELETE_SELECTED_EMPLOYEE = \"employee/DELETE_SELECTED_EMPLOYEE\";\r\nconst SELECT_EMPLOYEE = \"employee/SELECT_EMPLOYEE\";\r\nconst UPDATE_EMPLOYEE = \"employee/UPDATE_EMPLOYEE\";\r\n\r\nconst initialState: IEmployeeState = {\r\n    employees: [],\r\n    selectedEmployeeId: null\r\n}\r\n\r\nexport default function (state: IEmployeeState = initialState, action: IAction): object {\r\n    switch (action.type) {\r\n        case CREATE_EMPLOYEE:\r\n            return { ...state, employees: [...state.employees, action.payload] }\r\n        case SET_EMPLOYEES:\r\n            return { ...state, employees: [...action.payload], isChanged: false }\r\n        case SELECT_EMPLOYEE:\r\n            return { ...state, selectedEmployeeId: action.payload }\r\n        case DELETE_SELECTED_EMPLOYEE:\r\n            return {\r\n                ...state,\r\n                selectedEmployeeId: null,\r\n                employees: state.employees.filter((employee: IStateEmployee) => employee._id !== state.selectedEmployeeId)\r\n            }\r\n        case UPDATE_EMPLOYEE:\r\n            return {\r\n                ...state,\r\n                // @ts-ignore\r\n                employees: state.employees.map((employee: IEmployee) => {\r\n                    if (employee._id === action.payload._id) return action.payload\r\n                    return employee;\r\n                })\r\n            }\r\n        default:\r\n            return initialState\r\n    }\r\n}\r\n\r\nconst createEmployeeAC = (payload: IStateEmployee) => ({\r\n    type: CREATE_EMPLOYEE, payload\r\n})\r\n\r\nconst setEmployeesAC = (payload: IStateEmployee[]) => ({\r\n    type: SET_EMPLOYEES, payload\r\n})\r\n\r\nconst deleteSelectedEmployeeAC = (payload: number) => ({\r\n    type: DELETE_SELECTED_EMPLOYEE, payload\r\n})\r\n\r\nconst updateEmployeeAC = (payload: IEmployee) => ({\r\n    type: UPDATE_EMPLOYEE, payload\r\n})\r\n\r\nexport const deleteSelectedEmployee = (payload: number) => (dispatch: any) => {\r\n    IEmployeeAPI.deleteEmployee(payload);\r\n    dispatch(deleteSelectedEmployeeAC(payload))\r\n}\r\n\r\nexport const selectEmployeeAC = (payload: number) => ({\r\n    type: SELECT_EMPLOYEE, payload\r\n})\r\n\r\nexport const createEmployee = (data: IEmployee) => (dispatch: any) => {\r\n    const newEmployee: IStateEmployee = IEmployeeAPI.createEmployee(data);\r\n    dispatch(createEmployeeAC(newEmployee))\r\n    dispatch(selectEmployeeAC(newEmployee._id!))\r\n}\r\n\r\nexport const getEmployees = () => (dispatch: any) => {\r\n    const employees: IStateEmployee[] = IEmployeeAPI.getEmployees();\r\n    dispatch(setEmployeesAC(employees))\r\n}\r\n\r\nexport const updateEmployee = (data: IEmployee) => (dispatch: any) => {\r\n    IEmployeeAPI.updateEmployee(data);\r\n    dispatch(updateEmployeeAC(data));\r\n}\r\n\r\n","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport {connect} from \"react-redux\";\r\nimport {deleteSelectedEmployee, getEmployees} from \"../redux/reducers/employeeReducer\";\r\n\r\n\r\nconst InstrumentPanel: React.FC<{ selectedEmployeeId: number, deleteSelectedEmployee: any, getEmployees: any }> =\r\n    ({selectedEmployeeId, deleteSelectedEmployee, getEmployees}) => {\r\n        return (\r\n            <Box mt={2} mb={5}>\r\n                <ButtonGroup color=\"primary\" aria-label=\"contained primary button group\">\r\n                    <Button onClick={getEmployees}>Обновить</Button>\r\n                    <Button color=\"secondary\" disabled={!selectedEmployeeId}\r\n                            onClick={() => deleteSelectedEmployee(selectedEmployeeId)}>Удалить</Button>\r\n                </ButtonGroup>\r\n            </Box>\r\n        )\r\n    }\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n    employees: state.employees.employees,\r\n    selectedEmployeeId: state.employees.selectedEmployeeId,\r\n    isChanged: state.employees.isChanged\r\n})\r\n\r\nexport default connect(mapStateToProps, {deleteSelectedEmployee, getEmployees})(InstrumentPanel);","import React, {useState} from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {connect} from \"react-redux\";\r\nimport {createEmployee} from \"../../redux/reducers/employeeReducer\";\r\nimport {IEmployee} from \"../../interfaces/entities\";\r\n\r\n\r\nconst EmployeeFormPresentation: React.FC<{ handleChange: any, handleSubmit: any, data: IEmployee, handleCheckbox: any, buttonText: string}>\r\n    = ({handleChange, handleSubmit, data, handleCheckbox, buttonText}) => {\r\n\r\n    return (\r\n        <>\r\n            <Box mb={2}>\r\n                <Typography variant=\"h4\" component=\"h4\">Форма</Typography>\r\n            </Box>\r\n\r\n            <Grid container component=\"form\" spacing={3} alignItems=\"center\" onSubmit={handleSubmit}>\r\n\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        placeholder=\"ФИО\"\r\n                        required\r\n                        fullWidth\r\n                        name=\"name\"\r\n                        onChange={handleChange}\r\n                        value={data.name.trim()}\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        select\r\n                        fullWidth\r\n                        label=\"Выберите должность\"\r\n                        onChange={handleChange}\r\n                        value={data.position.trim()}\r\n                        name=\"position\"\r\n                        required\r\n                    >\r\n                        <MenuItem value=\"Директор\">Директор</MenuItem>\r\n                        <MenuItem value=\"Главный директор\">Главный директор</MenuItem>\r\n                        <MenuItem value=\"Самый главный директор\">Самый главный директор</MenuItem>\r\n                    </TextField>\r\n                </Grid>\r\n\r\n                <Grid item xs={6}>\r\n                    <TextField\r\n                        label=\"День рождения\"\r\n                        type=\"date\"\r\n                        value={data.birthday}\r\n                        onChange={handleChange}\r\n                        fullWidth\r\n                        name=\"birthday\"\r\n                        InputLabelProps={{shrink: true}}\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid item xs={6}>\r\n                    <label>\r\n                        <Checkbox name=\"isFired\" color=\"primary\" checked={data.isFired} onChange={handleCheckbox}/>\r\n                        <Typography\r\n                            variant=\"body1\"\r\n                            component=\"span\"\r\n                        >Уволен</Typography>\r\n                    </label>\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                    <FormControl component=\"fieldset\">\r\n                        <FormLabel component=\"legend\">Пол</FormLabel>\r\n                        <RadioGroup aria-label=\"gender\" name=\"gender\" value={data.gender} onChange={handleChange}>\r\n                            <FormControlLabel value=\"female\" control={<Radio/>} label=\"Мужской\"/>\r\n                            <FormControlLabel value=\"male\" control={<Radio/>} label=\"Женский\"/>\r\n                        </RadioGroup>\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Button variant=\"contained\" color=\"primary\" type=\"submit\">{buttonText}</Button>\r\n                </Grid>\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default connect(null, {createEmployee})(EmployeeFormPresentation)","import React, {useState} from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {IEmployee} from \"../../interfaces/entities\";\r\nimport EmployeeForm from \"./EmployeeFormPresentation\";\r\nimport {updateEmployee} from \"../../redux/reducers/employeeReducer\";\r\n\r\n\r\nconst UpdateEmployee: React.FC<{ employee: IEmployee, updateEmployee: any }> = ({ employee, updateEmployee }) => {\r\n\r\n    const [data, setData] = useState(employee)\r\n    const [isChanged, setChanged] = useState(false)\r\n    console.log(employee)\r\n    const handleSubmit = (e: React.SyntheticEvent) => {\r\n        e.preventDefault();\r\n        updateEmployee(data);\r\n        alert(\"Данные успешно обновлены\");\r\n    }\r\n\r\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setData({ ...data,  [e.target.name]: e.target.value})\r\n        setChanged(true);\r\n    }\r\n\r\n    const handleCheckbox = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setData({ ...data, [e.target.name]: e.target.checked });\r\n        setChanged(true);\r\n    };\r\n\r\n    return (\r\n        <EmployeeForm\r\n            buttonText=\"Обновить\"\r\n            handleChange={handleChange}\r\n            handleCheckbox={handleCheckbox}\r\n            handleSubmit={handleSubmit}\r\n            data={data}\r\n        />\r\n    )\r\n}\r\n\r\nexport default connect(null, {updateEmployee})(UpdateEmployee)","import React, {useState} from \"react\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport {selectEmployeeAC} from \"../redux/reducers/employeeReducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {IEmployee} from \"../interfaces/entities\";\r\nimport UpdateEmployee from \"./EmployeeForm/UpdateEmployee\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\n\r\n\r\nconst EmployeeRow: React.FC<{ selectedEmployeeId: number, employee: IEmployee, selectEmployee: any }> = ({selectedEmployeeId, employee, selectEmployee}) => {\r\n\r\n    const [open, setOpen] = useState(false);\r\n\r\n    return (\r\n        <TableRow\r\n            className={selectedEmployeeId === employee._id ? \"selected-employee\" : undefined}\r\n            style={{cursor: \"pointer\"}}\r\n            onClick={() => selectEmployee(employee._id!)}>\r\n            <TableCell align=\"left\" style={{\r\n                display: \"flex\",\r\n                justifyContent: \"space-between\",\r\n                alignItems: \"center\"\r\n            }}\r\n            >\r\n                {employee.name}\r\n                <Button size=\"small\" color=\"primary\" variant=\"outlined\" onClick={() => setOpen(true)}>Просмотреть\r\n                    профиль</Button>\r\n                <Dialog open={open} onClose={() => setOpen(false)}>\r\n                    <DialogContent>\r\n                        <UpdateEmployee employee={employee}/>\r\n                    </DialogContent>\r\n                </Dialog>\r\n            </TableCell>\r\n        </TableRow>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n    selectedEmployeeId: state.employees.selectedEmployeeId,\r\n})\r\n\r\nexport default connect(mapStateToProps, {selectEmployee: selectEmployeeAC})(EmployeeRow)","import React from \"react\";\r\n\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport {connect} from \"react-redux\";\r\nimport {IStateEmployee} from \"../interfaces/entities\";\r\nimport EmployeeRow from \"./EmployeeRow\";\r\n\r\n\r\n\r\nconst EmployeesList: React.FC<{ employees: IStateEmployee[] }> =\r\n    ({employees}) => {\r\n\r\n        return (\r\n            <>\r\n                <Box mb={2}>\r\n                    <Typography variant=\"h4\" component=\"h4\">Сотрудники</Typography>\r\n                </Box>\r\n                <TableContainer component={Paper}>\r\n                    <Table size=\"small\" aria-label=\"a dense table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>ФИО</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {employees.map((employee, i) => (\r\n                                <EmployeeRow key={employee.name + i} employee={employee}/>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </>\r\n        )\r\n    }\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n    employees: state.employees.employees\r\n})\r\n\r\nexport default connect(mapStateToProps)(EmployeesList);","import React, {useState} from \"react\"\r\nimport { connect } from \"react-redux\";\r\nimport {IEmployee} from \"../../interfaces/entities\";\r\nimport EmployeeForm from \"./EmployeeFormPresentation\";\r\nimport {createEmployee} from \"../../redux/reducers/employeeReducer\";\r\n\r\nconst CreateNewEmployee: React.FC<{ createEmployee: any }> = ({ createEmployee }) => {\r\n\r\n    const initialData: IEmployee = {\r\n        position: \" \",\r\n        name: \" \",\r\n        birthday: \"\",\r\n        isFired: false,\r\n        gender: \" \",\r\n    }\r\n\r\n    const [data, setData] = useState(initialData)\r\n\r\n    const handleSubmit = (e: React.SyntheticEvent) => {\r\n        e.preventDefault();\r\n        createEmployee(data);\r\n        setData(initialData);\r\n    }\r\n\r\n    const handleCheckbox = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setData({ ...data, [e.target.name]: e.target.checked });\r\n    };\r\n\r\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setData({ ...data,  [e.target.name]: e.target.value})\r\n    }\r\n\r\n    return (\r\n        <EmployeeForm\r\n            buttonText=\"Создать\"\r\n            handleChange={handleChange}\r\n            handleCheckbox={handleCheckbox}\r\n            handleSubmit={handleSubmit}\r\n            data={data}\r\n        />\r\n    )\r\n\r\n}\r\n\r\nexport default connect(null, { createEmployee })(CreateNewEmployee)","import React, {useEffect} from 'react';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport InstrumentPanel from \"./components/InstrumentPanel\";\r\nimport EmployeesList from \"./components/EmployeesList\";\r\nimport CreateNewEmployee from \"./components/EmployeeForm/CreateNewEmployee\";\r\nimport {getEmployees} from \"./redux/reducers/employeeReducer\";\r\nimport { func } from './interfaces/common';\r\nimport { connect } from 'react-redux';\r\n\r\nconst App: React.FC<{ getEmployees: func }> = ({ getEmployees }) => {\r\n\r\n    useEffect(() => getEmployees(),[])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Grid container className=\"container\">\r\n                <Grid item xs={6}>\r\n                    <InstrumentPanel/>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid container spacing={2} className=\"container\">\r\n                <Grid item xs={6}>\r\n                    <EmployeesList/>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <CreateNewEmployee/>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default connect(null, {getEmployees})(App);\r\n","import {createStore, combineReducers, applyMiddleware, compose} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport employeeReducer from \"./reducers/employeeReducer\";\r\n\r\ndeclare global {\r\n    interface Window {\r\n        store?: object;\r\n    }\r\n}\r\n\r\nconst reducers = combineReducers({\r\n    employees: employeeReducer\r\n})\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunkMiddleware))\r\nwindow.store = store\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport store from './redux/store';\n\nReactDOM.render(\n    <Provider store={store}>\n    <App />\n    </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}